/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Body;
import io.swagger.model.UserDetails;
import io.swagger.model.UserLogin;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-10-29T02:24:33.854Z[GMT]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "List users", nickname = "getAllUsers", notes = "Lists all users that used the plugin configured with your plugin key.", response = UserDetails.class, responseContainer = "List", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An object with a results property that contains an array of up to limit user objects.", response = UserDetails.class, responseContainer = "List") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDetails>> getAllUsers(@ApiParam(value = "The number of user objects to be returned. The default is 10.") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "The number of user objects to skip. Use this argument for pagination. The default is 0.") @Valid @RequestParam(value = "offset", required = false) Integer offset
);


    @ApiOperation(value = "Retrieve a user", nickname = "getUserById", notes = "Retrieves a user object with the supplied ID.", response = UserDetails.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a user object if a valid identifier was provided.", response = UserDetails.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserDetails> getUserById(@ApiParam(value = "The identifier of the user to be retrieved.",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "Login to payroll provider", nickname = "loginToPayrollProvider", notes = "Login user to payroll provider", response = UserLogin.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An object with a results property that contains an array of data partner objects.", response = UserLogin.class) })
    @RequestMapping(value = "/users/{id}/login/{provider}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserLogin> loginToPayrollProvider(@ApiParam(value = "The identifier of the user to be retrieved.",required=true) @PathVariable("id") String id
,@ApiParam(value = "The identifier of the payroll provider.",required=true) @PathVariable("provider") String provider
,@ApiParam(value = ""  )  @Valid @RequestBody Body body
);

}

